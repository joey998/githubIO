(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{379:function(e,n,o){"use strict";o.r(n);var t=o(40),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h3",{attrs:{id:"需求-我想要在一个遍历里面执行多个异步操作-需要等上一个异步操作完了-再去执行下一个异步"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#需求-我想要在一个遍历里面执行多个异步操作-需要等上一个异步操作完了-再去执行下一个异步"}},[e._v("#")]),e._v(" 需求：我想要在一个遍历里面执行多个异步操作，需要等上一个异步操作完了，再去执行下一个异步；")]),e._v(" "),o("ol",[o("li",[o("p",[e._v("直接使用了forEach")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function cc(){\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      console.log(12)\n      resolve()\n    }, 2000);\n  })\n} \n\n[1,2,3,4].forEach(async item => {\n  console.log(item)\n  await cc()\n  console.log('end')\n})\n")])])]),o("p",[o("strong",[e._v("结果：")]),e._v(" 一开始就输入"),o("code",[e._v("1，2，3，4")]),e._v("，2秒后输出四个"),o("code",[e._v("12 和 ‘end’")]),e._v(" "),o("strong",[e._v("分析：")]),e._v(" 与要求不符合，使用map或者reduce也是一样的")])]),e._v(" "),o("li",[o("p",[e._v("使用for of")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function cc(){\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          console.log(12)\n          resolve()\n        }, 2000);\n      })\n    } \n\n    (async function (){\n      for (let item of [1,2,3,4]) {\n        console.log(item)\n        await cc()\n      }\n    })()\n")])])]),o("p",[o("strong",[e._v("结果：")]),e._v(" 首先输出了"),o("code",[e._v("1")]),e._v("，待两秒之后输出"),o("code",[e._v("12 和 2")]),e._v("，在两秒输出"),o("code",[e._v("12 和 3")]),e._v("，在两秒输出"),o("code",[e._v("12 和 4")]),e._v("，在两秒输出"),o("code",[e._v("12")]),e._v(" "),o("strong",[e._v("分析：")]),e._v(" 满足需求")])]),e._v(" "),o("li",[o("p",[e._v("自己写了个同步方法，参数需要return 一个promise对象")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("Array.prototype.asyncForEach = async function(callback){\n  let len = this.length\n  for (let i = 0; i < len; i++) {\n    console.log('one for start', i);\n    console.log('before======')\n    await callback()\n    console.log('after=====')\n    console.log('one for end', i);\n  }\n}\n\nmm = [1,2,3,4]  //mm首先需要声明，不能够直接[1,2,3,4].asyncForEach，我也不知道为啥\nmm.asyncForEach((item, index) => {\n  let promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('2s passed')\n    }, 2000);\n  })\n  return promise\n})\n")])])])])])])}),[],!1,null,null,null);n.default=s.exports}}]);